/*
#include <iostream>
#include <string>
#include <list>
#include <opencv2/opencv.hpp>

using namespace std;
using namespace cv;

/*
 * This class wraps the a photo.
 *
class Photo{

    private:
        cv::Mat *image;
        // image dimensions:
        int heigth;
        int width;

    public:    
        Photo(string image_filename){
            this->image = this.loadImage(image_filename);
        }       

        cv::Mat* loadImage(string image_filename){
            this->image = cv::imread(image_filename);
            cout << image_filename << " loaded" << endl;
            return &image;  
        }

        void save(string filename){
            cout << "saving " << filename << endl;
            cv::imwrite(filename + ".png", this->image);
        }
};

/*
 * This class wraps the a collection of photos.
 */
/*
class Album {
    
    private: list<Photo> *album;
    
};

class Filter : public Album {
  
};

void salt(cv::Mat &image, int n)
{
     cout << "Image channels: " << image.channels() << endl;
     cout << "Number of pixels: " << image.cols * image.rows << endl;
     cout << "It'll affect: " << n << endl;

     for (int i = 0; i < n; ++i)
     {
	  int j = rand() % image.cols;
	  int k = rand() % image.rows;
	  image.at<uchar>(j,k)= 255;
     }
}

int main(int argc, char** argv){

    Photo *p = new Photo( argv[1] );
    cout << argv[1] << " read sucefully" << endl;
    return 0;
}
*/

#include <iostream>
#include <vector>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>

using namespace std;

void info(cv::Mat &image)
{
     cout << "Rows: " << image.rows << endl;
     cout << "Cols: " << image.cols << endl;
     cout << "Channels: " << image.channels() << endl;
     //cout << "Rows: " << image.rows << endl;
}

//vector<cv::Mat> 

int main(int argc, char** argv)
{

     // Read An image
     cv::Mat image = cv::imread(argv[1], 0);

     int a, b, c;
     a = b = c = 1;

     //Extract region of interest
     cv::Mat imageRoi = image(cv::Rect(0, 22, 501, 500));
     //salt(image, (image.rows * image.cols)/10);
     info(image);
     cout << endl;
     info(imageRoi);

     // create image window named "My Image"
     cv::namedWindow("My Image");
     // show the image on window
     cv::imshow("My Image", imageRoi);

     // wait key for 5000 ms
     cv::waitKey(5000);

     return 1;
}
